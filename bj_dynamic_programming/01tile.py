#01타일

# 문제
# 지원이에게 2진 수열을 가르쳐 주기 위해, 지원이 아버지는 그에게 타일들을 선물해주셨다. 그리고 이 각각의 타일들은 0 또는 1이 쓰여 있는 낱장의 타일들이다.

# 어느 날 짓궂은 동주가 지원이의 공부를 방해하기 위해 0이 쓰여진 낱장의 타일들을 붙여서 한 쌍으로 이루어진 00 타일들을 만들었다. 결국 현재 1 하나만으로 이루어진 타일 또는 0타일을 두 개 붙인 한 쌍의 00타일들만이 남게 되었다.

# 그러므로 지원이는 타일로 더 이상 크기가 N인 모든 2진 수열을 만들 수 없게 되었다. 예를 들어, N=1일 때 1만 만들 수 있고, N=2일 때는 00, 11을 만들 수 있다. (01, 10은 만들 수 없게 되었다.) 또한 N=4일 때는 0011, 0000, 1001, 1100, 1111 등 총 5개의 2진 수열을 만들 수 있다.

# 우리의 목표는 N이 주어졌을 때 지원이가 만들 수 있는 모든 가짓수를 세는 것이다. 단 타일들은 무한히 많은 것으로 가정하자.

# 입력
# 첫 번째 줄에 자연수 N이 주어진다. (1 ≤ N ≤ 1,000,000)

# 출력
# 첫 번째 줄에 지원이가 만들 수 있는 길이가 N인 모든 2진 수열의 개수를 15746으로 나눈 나머지를 출력한다.

# 예제 입력 1 
# 4
# 예제 출력 1 
# 5

# n = int(input())
# memoization=[0]*1000001

# # 피보나치 함수를 재귀함수로 구현 (Top-down DP)
# def fibo(x):
    
#     if x == 0:

#         return 1
#     elif x == 1:

#         return 1
#     # 이미 계산한 적 있으면 그대로 반환
#     if memoization[x] != 0:
#         return memoization[x]
#     # 계산한 적 없으면 점화식에 따라 피보나치 결과 반환
#     memoization[x] = fibo(x - 1) + fibo(x - 2)
#     return memoization[x]

# print(fibo(n))

# bottom up 방식으로 해야 됨.
n = int(input())
dp = [0] * 1000001
dp[0] = 1
dp[1] = 1


# 피보나치 수열 반복문으로 구현(Bottom-Up DP)
for i in range(2, n + 1):
    dp[i] = (dp[i - 1] + dp[i - 2])%15746 #15746이 넘어가버리면 ../?
    # print(dp[i])

print(dp[n])

# 정확히는 특정한 수로 나누는 이유를 물어본다면 그건 정답이 너무 커지는 것을 방지하기 위해 나머지 값을 취하는 거고 

# 이 문제에서 "15746"으로 나누는건 딱히 큰 의미 없습니다.